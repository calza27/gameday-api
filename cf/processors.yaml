AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: gameday-api > Public API processing to serve GameDay data export

Parameters:
  SubnetId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /network/app-subnet
  VpcId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /network/vpc-id
  S3BucketArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /gameday-api-processor/s3/arn
  DatabaseArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /gameday-api-processor/ddb/arn

Globals:
  Function:
    Handler: bootstrap
    Runtime: provided.al2
    Timeout: 30
    MemorySize: 128
    AutoPublishAlias: live
    VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetId
      
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for api-processors
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow all traffic on port 443

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Lambda role for api-processors
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: logs-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: network-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource:
                  - '*'
        - PolicyName: bucket-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Ref S3BucketArn
                  - !Sub '${S3BucketArn}/*'
        - PolicyName: dynamoDB-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Ref DatabaseArn
        - PolicyName: ssm-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - "*"

  # ExportFunc:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: 'gameday-api-processor-export'
  #     CodeUri: ../cmd/bin/export
  #     Role:
  #       !GetAtt FunctionRole.Arn

  # ExportFuncLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub "/aws/lambda/${ExportFunc}"
  #     RetentionInDays: 365

  # ExportFuncArnParam:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: '/gameday-api-processor/function/export/arn'
  #     Type: String
  #     Value: !Sub '${ExportFunc.Arn}'
  #     Description: ARN for the Export function handler

  ListFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'gameday-api-processor-list'
      CodeUri: ../cmd/bin/list
      Role:
        !GetAtt FunctionRole.Arn

  ListFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ListFunc}"
      RetentionInDays: 365

  ListFuncArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/gameday-api-processor/function/list/arn'
      Type: String
      Value: !Sub '${ListFunc.Arn}'
      Description: ARN for the List function handler

  GetGameFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'gameday-api-processor-getGame'
      CodeUri: ../cmd/bin/getGame
      Role:
        !GetAtt FunctionRole.Arn

  GetGameFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetGameFunc}"
      RetentionInDays: 365

  GetGameFuncArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/gameday-api-processor/function/getGame/arn'
      Type: String
      Value: !Sub '${GetGameFunc.Arn}'
      Description: ARN for the Get Game function handler

  GetFileUrlFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'gameday-api-processor-getFileUrl'
      CodeUri: ../cmd/bin/getFileUrl
      Role:
        !GetAtt FunctionRole.Arn

  GetFileUrlFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetFileUrlFunc}"
      RetentionInDays: 365

  GetFileUrlFuncArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/gameday-api-processor/function/getFileUrl/arn'
      Type: String
      Value: !Sub '${GetFileUrlFunc.Arn}'
      Description: ARN for the Get File URL function handler